{
  "beginend": {
    "prefix": "beginend",
    "body": "${1:container}.begin(), ${1:container}.end()",
    "description": "Snippet for begin/end iterator pair"
  },
  "for": {
    "prefix": "fori",
    "body": [
      "for (int i = ${1:0}; i < ${2:length}; i++) {",
      "\t$0",
      "}"
    ],
    "description": "Code snippet for integer 'for' loop"
  },
  "forj": {
    "prefix": "forj",
    "body": [
      "for (int j = ${1:0}; j < ${2:length}; j++) {",
      "\t$0",
      "}"
    ],
    "description": "Code snippet for integer 'for' loop"
  },
  "forr": {
    "prefix": "forr",
    "body": [
      "for (int i = ${1:0}; i < ${2:length}; i--) {",
      "\t$0",
      "}"
    ],
    "description": "Code snippet for integer 'for' loop"
  },
  "do": {
    "prefix": "do",
    "body": [
      "do {",
      "\t$0",
      "} while (${1:condition});"
    ],
    "description": "Code snippet for do...while loop"
  },
  "while": {
    "prefix": "while",
    "body": [
      "while (${1:condition}) {",
      "\t$0",
      "}"
    ],
    "description": "Code snippet for while loop"
  },
  "foreach": {
    "prefix": "foreach",
    "body": [
      "for (const auto& ${1:item} : ${2:container}) {",
      "\t$0",
      "}"
    ],
    "description": "Code snippet for range-based for loop (const ref)"
  },
  "foreachmut": {
    "prefix": "foreachmut",
    "body": [
      "for (auto& ${1:item} : ${2:container}) {",
      "\t$0",
      "}"
    ],
    "description": "Code snippet for range-based for loop (mutable ref)"
  },
  "foreachval": {
    "prefix": "foreachval",
    "body": [
      "for (auto ${1:item} : ${2:container}) {",
      "\t$0",
      "}"
    ],
    "description": "Code snippet for range-based for loop (by value)"
  },
  "if": {
    "prefix": "if",
    "body": [
      "if (${1:condition}) {",
      "\t$0",
      "}"
    ],
    "description": "Code snippet for if statement"
  },
  "else": {
    "prefix": "else",
    "body": [
      "else {",
      "\t$0",
      "}"
    ],
    "description": "Code snippet for else statement"
  },
  "elseif": {
    "prefix": "elseif",
    "body": [
      "else if (${1:condition}) {",
      "\t$0",
      "}"
    ],
    "description": "Code snippet for else if statement"
  },
  "enum": {
    "prefix": "enum",
    "body": [
      "enum class ${1:MyEnum} {",
      "\t$0",
      "};"
    ],
    "description": "Code snippet for scoped enum (enum class)"
  },
  "enumlegacy": {
    "prefix": "enumlegacy",
    "body": [
      "enum ${1:MyEnum} {",
      "\t$0",
      "};"
    ],
    "description": "Code snippet for legacy enum"
  },
  "class": {
    "prefix": "class", 
    "body": [
      "class ${1:MyClass} {",
      "\t$2",
      "public:",
      "\t$0",
      "};"
    ],
    "description": "Modern C++ class with rule of five"
  },
  "namespace": {
    "prefix": "namespace",
    "body": [
      "namespace ${1:name} {",
      "",
      "$0",
      "",
      "}  // namespace ${1:name}"
    ],
    "description": "Code snippet for namespace"
  },
  "#ifdef": {
    "prefix": "#ifdef",
    "body": [
      "#ifdef ${1:MACRO}",
      "$0",
      "#endif  // ${1:MACRO}"
    ],
    "description": "Code snippet for #ifdef"
  },
  "#ifndef": {
    "prefix": "#ifndef",
    "body": [
      "#ifndef ${1:MACRO}",
      "$0",
      "#endif  // !${1:MACRO}"
    ],
    "description": "Code snippet for #ifndef"
  },
  "#if": {
    "prefix": "#if",
    "body": [
      "#if ${1:condition}",
      "$0",
      "#endif  // ${1:condition}"
    ],
    "description": "Code snippet for #if"
  },
  "struct": {
    "prefix": "struct",
    "body": [
      "struct ${1:MyStruct} {",
      "\t$0",
      "};"
    ],
    "description": "Code snippet for struct"
  },
  "switch": {
    "prefix": "switch",
    "body": [
      "switch (${1:expr}) {",
      "case ${2:value}:",
      "\t$0",
      "\tbreak;",
      "default:",
      "\tbreak;",
      "}"
    ],
    "description": "Code snippet for switch statement"
  },
  "case": {
    "prefix": "case",
    "body": [
      "case ${1:value}:",
      "\t$0",
      "\tbreak;"
    ],
    "description": "Code snippet for case statement"
  },
  "try": {
    "prefix": "try",
    "body": [
      "try {",
      "\t$0",
      "} catch (const ${1:std::exception}& ${2:e}) {",
      "\t$3",
      "}"
    ],
    "description": "Code snippet for try catch"
  },
  "union": {
    "prefix": "union",
    "body": [
      "union ${1:MyUnion} {",
      "\t$0",
      "};"
    ],
    "description": "Code snippet for union"
  },
  "cout": {
    "prefix": "cout",
    "body": "std::cout << ${1:\"message\"} << '\\n';",
    "description": "Code snippet for std::cout"
  },
  "cerr": {
    "prefix": "cerr",
    "body": "std::cerr << ${1:\"error\"} << '\\n';",
    "description": "Code snippet for std::cerr"
  },
  "#inc": {
    "prefix": "#inc",
    "body": "#include \"${1:header.h}\"",
    "description": "Code snippet for #include with quotes"
  },
  "#inc<": {
    "prefix": "#inc<",
    "body": "#include <${1:header}>",
    "description": "Code snippet for #include with angle brackets"
  },
  "#def": {
    "prefix": "#def",
    "body": "#define ${1:MACRO} ${2:value}",
    "description": "Code snippet for #define"
  },
  "#pragma": {
    "prefix": "#pragma",
    "body": "#pragma ${1:once}",
    "description": "Code snippet for #pragma"
  },
  "main": {
    "prefix": "main",
    "body": [
      "int main(int argc, char* argv[]) {",
      "\t$0",
      "\treturn 0;",
      "}"
    ],
    "description": "Code snippet for main function"
  },
  "mainsimple": {
    "prefix": "mains",
    "body": [
      "int main() {",
      "\t$0",
      "\treturn 0;",
      "}"
    ],
    "description": "Code snippet for simple main function"
  },
  "lambda": {
    "prefix": "lambda",
    "body": "[${1:}](${2:}) ${3:-> auto} {$0}",
    "description": "Code snippet for lambda expression"
  },
  "constexpr": {
    "prefix": "constexpr",
    "body": "constexpr ${1:auto} ${2:var} = ${3:value};",
    "description": "Code snippet for constexpr variable"
  },
  "template": {
    "prefix": "template",
    "body": [
      "template <typename ${1:T}>",
      "$0"
    ],
    "description": "Code snippet for template"
  },
  "using": {
    "prefix": "using",
    "body": "using ${1:alias} = ${2:type};",
    "description": "Code snippet for type alias"
  },
  "for_iterator": {
    "prefix": "forit",
    "body": [
      "for (auto ${1:it} = ${2:container}.begin(); ${1:it} != ${2:container}.end(); ${1:it}++) {",
      "\t$0",
      "}"
    ],
    "description": "For loop with iterator - it and container appear multiple times"
  },
  "for_const_iterator": {
    "prefix": "forci",
    "body": [
      "for (auto ${1:it} = ${2:container}.cbegin(); ${1:it} != ${2:container}.cend(); ++${1:it}) {",
      "\t$0",
      "}"
    ],
    "description": "For loop with const iterator - it and container appear multiple times"
  },
  "for_reverse_iterator": {
    "prefix": "forri",
    "body": [
      "for (auto ${1:it} = ${2:container}.rbegin(); ${1:it} != ${2:container}.rend(); ++${1:it}) {",
      "\t$0",
      "}"
    ],
    "description": "For loop with reverse iterator - it and container appear multiple times"
  },
  "if_else": {
    "prefix": "ife",
    "body": [
      "if (${1:condition}) {",
      "\t$2",
      "} else {",
      "\t$0",
      "}"
    ],
    "description": "If-else statement"
  },
  "switch_statement": {
    "prefix": "swi",
    "body": [
      "switch (${1:variable}) {",
      "case ${2:value}:",
      "\t$3",
      "\tbreak;",
      "default:",
      "\t$0",
      "\tbreak;",
      "}"
    ],
    "description": "Switch statement"
  },
  "main_function": {
    "prefix": "mainn",
    "body": [
      "int main() {",
      "\t$0",
      "",
      "\treturn 0;",
      "}"
    ],
    "description": "Main function"
  },
  "function_definition": {
    "prefix": "func",
    "body": [
      "${1:returnType} ${2:functionName}(${3:parameters}) {",
      "\t$0",
      "}"
    ],
    "description": "Function definition"
  },
  "class_definition": {
    "prefix": "classs",
    "body": [
      "class ${1:ClassName} {",
      "public:",
      "\t${1:ClassName}();",
      "\t~${1:ClassName}();",
      "",
      "private:",
      "\t$0",
      "};"
    ],
    "description": "Basic class definition - ClassName appears multiple times"
  },
  "struct_definition": {
    "prefix": "structt",
    "body": [
      "struct ${1:StructName} {",
      "\t$0",
      "};"
    ],
    "description": "Struct definition"
  },
  "comment_block": {
    "prefix": "comm",
    "body": [
      "/*",
      " * ${1:comment}",
      " */"
    ],
    "description": "Comment block"
  },
  "unique_ptr": {
    "prefix": "uniq",
    "body": "std::unique_ptr<${1:Type}> ${2:ptr} = std::make_unique<${1:Type}>();$0",
    "description": "Unique pointer - Type appears multiple times"
  },
  "shared_ptr": {
    "prefix": "shar",
    "body": "std::shared_ptr<${1:Type}> ${2:ptr} = std::make_shared<${1:Type}>();$0",
    "description": "Shared pointer - Type appears multiple times"
  },
  "try_catch": {
    "prefix": "tryc",
    "body": [
      "try {",
      "\t$1",
      "} catch (const std::exception& ${2:e}) {",
      "\t$0",
      "}"
    ],
    "description": "Try-catch block"
  },
  "template_function": {
    "prefix": "templf",
    "body": [
      "template<typename ${1:T}>",
      "${2:returnType} ${3:functionName}(${1:T} ${4:param}) {",
      "\t$0",
      "}"
    ],
    "description": "Template function - T appears multiple times"
  },
  "template_class": {
    "prefix": "templc",
    "body": [
      "template<typename ${1:T}>",
      "class ${2:ClassName} {",
      "public:",
      "\t$0",
      "private:",
      "",
      "};"
    ],
    "description": "Template class"
  },
  "sort_find": {
    "prefix": "sortv",
    "body": "std::sort(${1:container}.begin(), ${1:container}.end());$0",
    "description": "Sort container - container appears multiple times"
  },
  "find_in_container": {
    "prefix": "findd",
    "body": "auto ${1:it} = std::find(${2:container}.begin(), ${2:container}.end(), ${3:value});$0",
    "description": "Find in container - container appears multiple times"
  },
  "lambda_expression": {
    "prefix": "lamb",
    "body": "auto ${1:lambda} = [](${2:parameters}) { return ${3:expression}; };$0",
    "description": "Lambda expression"
  },
  "header_guard": {
    "prefix": "ifnd",
    "body": [
      "#ifndef ${1:HEADER_NAME_H}",
      "#define ${1:HEADER_NAME_H}",
      "",
      "$0",
      "",
      "#endif // ${1:HEADER_NAME_H}"
    ],
    "description": "Header guard - HEADER_NAME_H appears multiple times"
  },
  "operator_equal": {
    "prefix": "opeq",
    "body": [
      "bool operator==(const ${1:ClassName}& ${2:other}) const {",
      "\treturn ${0:true};",
      "}"
    ],
    "description": "Equality operator"
  },
  "ifdef_block": {
    "prefix": "ifdef",
    "body": [
      "#ifdef ${1:CONDITION}",
      "$0",
      "#endif // ${1:CONDITION}"
    ],
    "description": "Ifdef block - CONDITION appears multiple times"
  },
  "if_defined": {
    "prefix": "ifd",
    "body": [
      "#if defined(${1:CONDITION})",
      "$0",
      "#endif // ${1:CONDITION}"
    ],
    "description": "If defined block - CONDITION appears multiple times"
  },
  "namespace_definition": {
    "prefix": "nspace",
    "body": [
      "namespace ${1:Name} {",
      "",
      "$0",
      "",
      "} // namespace ${1:Name}"
    ],
    "description": "Namespace definition - Name appears multiple times"
  },
  "anonymous_namespace": {
    "prefix": "nspac",
    "body": [
      "namespace {",
      "",
      "$0",
      "",
      "} // anonymous namespace"
    ],
    "description": "Anonymous namespace"
  },
  "enum_class": {
    "prefix": "enuma",
    "body": [
      "enum class ${1:EnumName} {",
      "\t${2:Value1},",
      "\t${3:Value2}",
      "};"
    ],
    "description": "Enum class"
  },
  "enum_old": {
    "prefix": "enumo",
    "body": [
      "enum ${1:EnumName} {",
      "\t${2:VALUE1},",
      "\t${3:VALUE2}",
      "};"
    ],
    "description": "Old style enum"
  },
  "raii_class": {
    "prefix": "raii",
    "body": [
      "class ${1:RAIIClass} {",
      "public:",
      "\t${1:RAIIClass}() { /* acquire */ }",
      "\t~${1:RAIIClass}() { /* release */ }",
      "\t${1:RAIIClass}(const ${1:RAIIClass}&) = delete;",
      "\t${1:RAIIClass}& operator=(const ${1:RAIIClass}&) = delete;",
      "};"
    ],
    "description": "RAII pattern - RAIIClass appears multiple times"
  },
  "singleton_pattern": {
    "prefix": "single",
    "body": [
      "class ${1:Singleton} {",
      "public:",
      "\tstatic ${1:Singleton}& getInstance() {",
      "\t\tstatic ${1:Singleton} instance;",
      "\t\treturn instance;",
      "\t}",
      "private:",
      "\t${1:Singleton}() = default;",
      "\t${1:Singleton}(const ${1:Singleton}&) = delete;",
      "\t${1:Singleton}& operator=(const ${1:Singleton}&) = delete;",
      "};"
    ],
    "description": "Singleton pattern - Singleton appears multiple times"
  },
  "make_unique": {
    "prefix": "makeun",
    "body": "auto ${1:ptr} = std::make_unique<${2:Type}>(${3:args});$0",
    "description": "Make unique pointer"
  },
  "make_shared": {
    "prefix": "makesh",
    "body": "auto ${1:ptr} = std::make_shared<${2:Type}>(${3:args});$0",
    "description": "Make shared pointer"
  },
  "dynamic_cast": {
    "prefix": "dyncast",
    "body": "auto ${1:derived} = std::dynamic_pointer_cast<${2:DerivedType}>(${3:basePtr});$0",
    "description": "Dynamic pointer cast"
  },
  "thread_creation": {
    "prefix": "thread",
    "body": [
      "std::thread ${1:t}([]() {",
      "\t// ${2:thread work}",
      "});",
      "${1:t}.join();$0"
    ],
    "description": "Thread creation - t appears multiple times"
  },
  "lock_guard": {
    "prefix": "mutex",
    "body": [
      "std::mutex ${1:mtx};",
      "std::lock_guard<std::mutex> ${2:lock}(${1:mtx});$0"
    ],
    "description": "Mutex with lock guard - mtx appears multiple times"
  },
  "structured_binding": {
    "prefix": "autob",
    "body": "auto [${1:var1}, ${2:var2}] = ${3:expression};$0",
    "description": "Structured binding (C++17)"
  },
  "initializer_list": {
    "prefix": "initl",
    "body": ": ${1:member1}(${2:value1}), ${3:member2}(${4:value2}) {$0}",
    "description": "Initializer list"
  },
  "transform_algorithm": {
    "prefix": "transf",
    "body": [
      "std::transform(${1:input}.begin(), ${1:input}.end(), ${2:output}.begin(), [](const auto& ${3:item}) {",
      "\treturn ${0:transformation};",
      "});"
    ],
    "description": "Transform algorithm - input appears multiple times"
  },
  "find_if_algorithm": {
    "prefix": "filte",
    "body": [
      "auto ${1:result} = std::find_if(${2:container}.begin(), ${2:container}.end(), [](const auto& ${3:item}) {",
      "\treturn ${0:condition};",
      "});"
    ],
    "description": "Find if algorithm - container appears multiple times"
  },
  "file_operations": {
    "prefix": "ifstm",
    "body": [
      "std::ifstream ${1:file}(\"${2:filename}\");",
      "if (!${1:file}.is_open()) {",
      "\t// ${0:handle error}",
      "}"
    ],
    "description": "Input file stream - file appears multiple times"
  },
  "stringstream": {
    "prefix": "sstream",
    "body": [
      "std::stringstream ${1:ss};",
      "${1:ss} << ${2:value};",
      "std::string ${3:result} = ${1:ss}.str();$0"
    ],
    "description": "String stream - ss appears multiple times"
  },
  "chrono_timing": {
    "prefix": "chrono",
    "body": [
      "auto ${1:start} = std::chrono::high_resolution_clock::now();",
      "// ${2:code to time}",
      "auto ${3:end} = std::chrono::high_resolution_clock::now();",
      "auto ${4:duration} = std::chrono::duration_cast<std::chrono::milliseconds>(${3:end} - ${1:start});$0"
    ],
    "description": "Chrono timing - start/end variables appear multiple times"
  },
  "type_alias": {
    "prefix": "usinga",
    "body": "using ${1:AliasName} = ${2:OriginalType};$0",
    "description": "Type alias"
  },
  "typedef": {
    "prefix": "typedefi",
    "body": "typedef ${1:OriginalType} ${2:AliasName};$0",
    "description": "Typedef"
  }
}
